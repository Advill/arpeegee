//default battle state character
public abstract class Monster
{
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//attributes
	//////////////////////////////////////////////////////////////////////////////////////////////////
	private String name;
	private int health;
	private int maxhealth;
	private int attack;
	private int defense;
	private int speed;
	private int atkmod;
	private int defmod;
	private int spdmod;
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//constructors		hp/atk/def/spd
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public Monster(String n, int hp, int atk, int def, int spd)
	{
		name = n;
		health = hp;
		maxhealth = hp;
		attack = atk;
		defense = def;
		speed = spd;
		atkmod = 0;
		defmod = 0;
		spdmod = 0;
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//getters
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public String getName()
	{
		return name;
	}
	public int getHp()
	{
		return health;
	}
	public int getMHp()
	{
		return maxhealth;
	}
	public int getAtk()
	{
		return attack;
	}
	public int getDef()
	{
		return defense;
	}
	public int getSpd()
	{
		return speed;
	}
	public int getAtkMod()
	{
		return atkmod;
	}
	public int getDefMod()
	{
		return defmod;
	}
	public int getSpdMod()
	{
		return spdmod;
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//heal
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public void heal(int amount)
	{
		int count = 0;
		for(int i = amount; i > 0; i--)
		{
			if(health < maxhealth)
			{
				health ++;
				count++;
			}
			else
				if(count > 0)
					System.out.println("You heal " + count + " HP!");
				break;
		}
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//modified stats
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public int getFullSpd()
	{
		return (speed + spdmod);
	}
	public int getFullDef()
	{
		return (defense + defmod);
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//damage = defense divided by two minus attack
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public int damage(int dmg)
	{
		int damage = (getFullDef() / 2) - dmg;
		if(damage < 0)
		{
			health += damage;
			return ( -1 * damage);
		}
		return 0;
	}
	public int attack()
	{
		return (attack + atkmod);
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//adders, mostly for player but may add monster self-buffs
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public void healthInc(int amount)
	{
		maxhealth += amount;
		health += amount;
	}
	public void atkInc(int amount)
	{
		attack+= amount;
	}
	public void defInc(int amount)
	{
		defense+= amount;
	}
	public void spdInc(int amount)
	{
		speed+= amount;
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////
	//abstracts
	//////////////////////////////////////////////////////////////////////////////////////////////////
	public abstract String talkTo();
	public abstract String taunt();
	public abstract String inspect();
}